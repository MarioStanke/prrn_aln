# Dixon's method for detection of outlirs

package	Dixon;
require	Exporter;

our @ISA = qw(Exporter);
our @EXPORT = qw(Dixon);

my @CriticalValues = (
	[0, 0.30, 0.20, 0.10, 0.05, 0.02, 0.01, 0.005],
	[0],	# dummy row
	[3, 0.6836, 0.7808, 0.8850, 0.9411, 0.9763, 0.9881, 0.9940],
	[4, 0.4704, 0.5603, 0.6789, 0.7651, 0.8457, 0.8886, 0.9201],
	[5, 0.3730, 0.4508, 0.5578, 0.6423, 0.7291, 0.7819, 0.8234],
	[6, 0.3173, 0.3868, 0.4840, 0.5624, 0.6458, 0.6987, 0.7437],
	[7, 0.2811, 0.3444, 0.4340, 0.5077, 0.5864, 0.6371, 0.6809],

	[ 8, 0.3177, 0.3858, 0.4793, 0.5539, 0.6321, 0.6808, 0.7226],
	[ 9, 0.2883, 0.3519, 0.4404, 0.5114, 0.5876, 0.6346, 0.6757],
	[10, 0.2660, 0.3260, 0.4102, 0.4778, 0.5509, 0.5972, 0.6375],

	[11, 0.2836, 0.3461, 0.4329, 0.5018, 0.5752, 0.6207, 0.6603],
	[12, 0.2646, 0.3242, 0.4076, 0.4740, 0.5455, 0.5903, 0.6290],
	[13, 0.2496, 0.3065, 0.3868, 0.4519, 0.5215, 0.5651, 0.6031],
	[14, 0.2370, 0.2921, 0.3697, 0.4327, 0.5006, 0.5431, 0.5803],
	[15, 0.2263, 0.2793, 0.3547, 0.4162, 0.4827, 0.5243, 0.5613],
	[16, 0.2170, 0.2685, 0.3418, 0.4015, 0.4665, 0.5076, 0.5435],
	[17, 0.2090, 0.2590, 0.3304, 0.3889, 0.4523, 0.4929, 0.5285],
	[18, 0.2019, 0.2507, 0.3203, 0.3779, 0.4406, 0.4807, 0.5161],
	[19, 0.1958, 0.2433, 0.3116, 0.3682, 0.4298, 0.4692, 0.5041],
	[20, 0.1901, 0.2365, 0.3035, 0.3590, 0.4199, 0.4588, 0.4931],
	[21, 0.1851, 0.2306, 0.2962, 0.3511, 0.4106, 0.4493, 0.4833],
	[22, 0.1804, 0.2252, 0.2897, 0.3436, 0.4025, 0.4404, 0.4742],
	[23, 0.1765, 0.2202, 0.2839, 0.3369, 0.3952, 0.4329, 0.4664],
	[24, 0.1725, 0.2156, 0.2781, 0.3302, 0.3874, 0.4244, 0.4573],
	[25, 0.1690, 0.2114, 0.2731, 0.3245, 0.3814, 0.4179, 0.4507],
	[26, 0.1659, 0.2076, 0.2683, 0.3191, 0.3752, 0.4117, 0.4437],
	[27, 0.1628, 0.2039, 0.2641, 0.3143, 0.3702, 0.4062, 0.4383],
	[28, 0.1599, 0.2005, 0.2597, 0.3095, 0.3645, 0.4007, 0.4325],
	[29, 0.1573, 0.1973, 0.2560, 0.3052, 0.3600, 0.3952, 0.4266],
	[30, 0.1550, 0.1946, 0.2524, 0.3012, 0.3552, 0.3905, 0.4219],
	[31, 0.1526, 0.1917, 0.2491, 0.2972, 0.3507, 0.3857, 0.4169],
	[32, 0.1503, 0.1890, 0.2458, 0.2937, 0.3472, 0.3818, 0.4125],
	[33, 0.1485, 0.1868, 0.2430, 0.2904, 0.3432, 0.3776, 0.4081],
	[34, 0.1465, 0.1844, 0.2400, 0.2870, 0.3394, 0.3736, 0.4039],
	[35, 0.1447, 0.1821, 0.2373, 0.2838, 0.3360, 0.3701, 0.4001],
	[36, 0.1430, 0.1800, 0.2347, 0.2810, 0.3331, 0.3669, 0.3967],
	[37, 0.1413, 0.1780, 0.2323, 0.2783, 0.3296, 0.3632, 0.3928],
	[38, 0.1398, 0.1762, 0.2300, 0.2757, 0.3267, 0.3599, 0.3895],
	[39, 0.1382, 0.1743, 0.2277, 0.2728, 0.3235, 0.3564, 0.3867],
	[40, 0.1367, 0.1725, 0.2254, 0.2705, 0.3210, 0.3542, 0.3839],
	[41, 0.1354, 0.1709, 0.2235, 0.2682, 0.3186, 0.3514, 0.3810],
	[42, 0.1342, 0.1695, 0.2215, 0.2660, 0.3160, 0.3485, 0.3779],
	[43, 0.1329, 0.1679, 0.2196, 0.2638, 0.3134, 0.3457, 0.3750],
	[44, 0.1318, 0.1665, 0.2181, 0.2619, 0.3110, 0.3431, 0.3723],
	[45, 0.1305, 0.1651, 0.2162, 0.2599, 0.3093, 0.3415, 0.3704],
	[46, 0.1295, 0.1637, 0.2146, 0.2582, 0.3070, 0.3390, 0.3674],
	[47, 0.1284, 0.1623, 0.2129, 0.2560, 0.3045, 0.3364, 0.3649],
	[48, 0.1273, 0.1612, 0.2114, 0.2542, 0.3026, 0.3345, 0.3634],
	[49, 0.1263, 0.1598, 0.2096, 0.2525, 0.3006, 0.3324, 0.3606],
	[50, 0.1253, 0.1587, 0.2083, 0.2508, 0.2989, 0.3305, 0.3584],
	[51, 0.1245, 0.1575, 0.2070, 0.2494, 0.2972, 0.3287, 0.3565],
	[52, 0.1235, 0.1564, 0.2056, 0.2476, 0.2951, 0.3266, 0.3545],
	[53, 0.1226, 0.1555, 0.2044, 0.2464, 0.2938, 0.3250, 0.3525],
	[54, 0.1219, 0.1545, 0.2030, 0.2446, 0.2918, 0.3229, 0.3511],
	[55, 0.1209, 0.1533, 0.2016, 0.2433, 0.2901, 0.3208, 0.3485],
	[56, 0.1202, 0.1525, 0.2006, 0.2418, 0.2887, 0.3198, 0.3474],
	[57, 0.1194, 0.1515, 0.1994, 0.2405, 0.2872, 0.3180, 0.3452],
	[58, 0.1186, 0.1505, 0.1982, 0.2392, 0.2856, 0.3165, 0.3436],
	[59, 0.1179, 0.1495, 0.1970, 0.2379, 0.2842, 0.3148, 0.3420],
	[60, 0.1172, 0.1487, 0.1959, 0.2365, 0.2823, 0.3126, 0.3398],
	[61, 0.1165, 0.1478, 0.1949, 0.2354, 0.2814, 0.3119, 0.3389],
	[62, 0.1159, 0.1470, 0.1938, 0.2341, 0.2800, 0.3104, 0.3377],
	[63, 0.1152, 0.1463, 0.1928, 0.2329, 0.2786, 0.3091, 0.3361],
	[64, 0.1146, 0.1455, 0.1921, 0.2320, 0.2776, 0.3077, 0.3346],
	[65, 0.1140, 0.1448, 0.1911, 0.2308, 0.2763, 0.3065, 0.3332],
	[66, 0.1134, 0.1442, 0.1902, 0.2299, 0.2752, 0.3051, 0.3316],
	[67, 0.1128, 0.1433, 0.1893, 0.2290, 0.2742, 0.3041, 0.3307],
	[68, 0.1122, 0.1426, 0.1883, 0.2279, 0.2730, 0.3028, 0.3297],
	[69, 0.1116, 0.1418, 0.1873, 0.2268, 0.2718, 0.3014, 0.3284],
	[70, 0.1112, 0.1413, 0.1868, 0.2260, 0.2706, 0.3004, 0.3267],
	[71, 0.1106, 0.1406, 0.1858, 0.2249, 0.2701, 0.2997, 0.3255],
	[72, 0.1101, 0.1400, 0.1850, 0.2238, 0.2684, 0.2979, 0.3241],
	[73, 0.1096, 0.1394, 0.1843, 0.2231, 0.2673, 0.2967, 0.3231],
	[74, 0.1091, 0.1387, 0.1834, 0.2221, 0.2667, 0.2961, 0.3227],
	[75, 0.1088, 0.1383, 0.1829, 0.2215, 0.2657, 0.2947, 0.3213],
	[76, 0.1082, 0.1378, 0.1822, 0.2206, 0.2647, 0.2938, 0.3199],
	[77, 0.1078, 0.1372, 0.1815, 0.2199, 0.2638, 0.2928, 0.3190],
	[78, 0.1072, 0.1365, 0.1807, 0.2189, 0.2626, 0.2918, 0.3181],
	[79, 0.1068, 0.1360, 0.1799, 0.2180, 0.2618, 0.2909, 0.3169],
	[80, 0.1064, 0.1354, 0.1793, 0.2174, 0.2609, 0.2900, 0.3159],
	[81, 0.1060, 0.1349, 0.1786, 0.2164, 0.2602, 0.2889, 0.3150],
	[82, 0.1056, 0.1344, 0.1781, 0.2160, 0.2593, 0.2881, 0.3140],
	[83, 0.1051, 0.1338, 0.1773, 0.2151, 0.2583, 0.2873, 0.3132],
	[84, 0.1047, 0.1334, 0.1769, 0.2143, 0.2574, 0.2860, 0.3120],
	[85, 0.1043, 0.1328, 0.1762, 0.2137, 0.2565, 0.2852, 0.3113],
	[86, 0.1039, 0.1324, 0.1755, 0.2131, 0.2561, 0.2844, 0.3100],
	[87, 0.1035, 0.1319, 0.1749, 0.2123, 0.2550, 0.2838, 0.3094],
	[88, 0.1031, 0.1315, 0.1745, 0.2117, 0.2543, 0.2826, 0.3085],
	[89, 0.1028, 0.1309, 0.1739, 0.2110, 0.2539, 0.2824, 0.3078],
	[90, 0.1025, 0.1306, 0.1733, 0.2102, 0.2528, 0.2809, 0.3063],
	[91, 0.1020, 0.1302, 0.1726, 0.2097, 0.2522, 0.2806, 0.3064],
	[92, 0.1016, 0.1297, 0.1721, 0.2091, 0.2514, 0.2796, 0.3050],
	[93, 0.1014, 0.1293, 0.1715, 0.2084, 0.2508, 0.2788, 0.3043],
	[94, 0.1011, 0.1289, 0.1712, 0.2079, 0.2503, 0.2784, 0.3038],
	[95, 0.1006, 0.1285, 0.1706, 0.2072, 0.2492, 0.2774, 0.3027],
	[96, 0.1004, 0.1280, 0.1701, 0.2068, 0.2487, 0.2768, 0.3020],
	[97, 0.1001, 0.1276, 0.1696, 0.2061, 0.2479, 0.2762, 0.3013],
	[98, 0.0998, 0.1274, 0.1691, 0.2056, 0.2475, 0.2755, 0.3005],
	[99, 0.0994, 0.1268, 0.1685, 0.2049, 0.2467, 0.2744, 0.2994],
	[100, 0.0992, 0.1266, 0.1682, 0.2044, 0.2461, 0.2740, 0.2995]
);

my @odr;
my $elt;		# error limit
my @outliers;

sub Dixon {
	my ($alpha, $dataref, $minlmt, $maxlmt) = @_;
	my @data = @$dataref;
	@outliers = ();
	my @sdata = ();
	for ($elt = 1; $elt < 8; ++$elt) {
	    last if ($alpha > $CriticalValues[0][$elt]);
	}
	--$elt;
	@odr = sort {$data[$a] <=> $data[$b]} (0 .. $#data);
	for (my $i = 0; $i <= $#odr; ++$i) {
	    push(@sdata, $data[$odr[$i]]);
	}
	my $deno = $sdata[$#sdata] - $sdata[0];
	return unless ($deno);
	&Dixontest($deno, @sdata);
	if ($minlmt) {
	    while (@sdata && (shift(@sdata) < $minlmt)) {
		push(@outliers, shift(@odr));
	    }
	}
	if ($maxlmt) {
	    while (@sdata && (pop(@sdata) > $maxlmt)) {
		push(@outliers, pop(@odr));
	    }
	}
	return(@outliers);
}

sub Dixontest {
	my ($deno, @data) = @_;
	my $n = $#data;
	my $min = $data[0];
	my $max = $data[$n];
	my $rs = $rl = 0;
	if ($n >= 2 && $n <= 6) {
		$rs = ($data[1] - $min) / $deno;
		$rl = ($max - $data[$n-1]) / $deno;
	} elsif ($n >= 7 && $n <= 9) {
		$rs = ($data[1] - $min) / $deno;
		$rl = ($max - $data[$n - 1]) / $deno;
	} elsif ($n >= 10 && $n <= 99) {
		$rs = ($data[2] - $min) / $deno;
		$rl = ($max - $data[$n - 2]) / $deno;
	} else {
	   return;
	}
	my $thr = $CriticalValues[$n][$elt];
#printf "%2d %2d %5d %5d %7.4f %7.4f %7.4f\n",
$elt, $n, $min, $max, $rs, $rl, $thr;
	my $ol;
	if ($rs >= $thr) {
	    push(@outliers, shift(@odr));
	    shift(@data);
	    ++$ol;
	}
	if ($rl >= $thr) {
	    push(@outliers, pop(@odr));
	    pop(@data);
	    ++$ol; 
	}
	&Dixontest($deno, @data) if ($ol);
}

1;

